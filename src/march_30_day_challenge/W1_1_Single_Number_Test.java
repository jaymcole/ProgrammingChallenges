package march_30_day_challenge;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.HashMap;
import java.util.Random;

import org.junit.Test;

public class W1_1_Single_Number_Test {


	//Generate Tests
	public static void main(String[] args) {
		Random random = new Random();
		for(int i = 0 ; i < 25; i++) {
			generateTest(random, i, random.nextInt(100), -10, 100);			
		}
		
	}
	
	private static void generateTest(Random random, int testNumber, int numberOfPairs, int low, int high) {
		HashMap<String, Integer> map = new HashMap<String, Integer>();

		int answer = random.nextInt(high) + low;
		map.put(answer+"", answer);		
		
		
		int nextValue;
		for (int i = 0; i < numberOfPairs; i++) {
			nextValue = random.nextInt(high) + low;
			if (map.containsKey(nextValue+"")) {
				i--;
			} else {
				map.put(nextValue+"", nextValue);		
				map.put(nextValue+""+random.nextFloat(), nextValue);		
			}
		}
		
		StringBuilder test = new StringBuilder();
		StringBuilder array = new StringBuilder("new int[]{")  ;
		for (Integer value : map.values()) {

			array.append(value + ",");
		}
		
		
		
		test.append("@Test ");
		test.append("public void test_"+testNumber+" () {");
		test.append("W1_1_Single_Number driver = new W1_1_Single_Number();");
		test.append("assertEquals("+answer+", driver.singleNumber("+array+"}));");
		test.append("}");
		System.out.println(test.toString());
	}
	
	
//	@Test
//	public void test_1 () {
//		W1_1_Single_Number driver = new W1_1_Single_Number();
//		assertEquals(1, driver.singleNumber(new int[] {}));
//
//	}
	@Test public void test_0 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(79, driver.singleNumber2(new int[]{88,25,70,11,-2,-3,-10,17,52,75,35,13,34,7,10,11,12,13,14,15,16,17,18,19,-8,12,53,46,0,1,-6,3,85,4,67,5,6,7,8,9,28,20,21,22,45,23,24,25,78,19,26,27,28,29,73,3,84,77,76,38,74,10,68,66,18,5,22,30,31,32,33,34,36,35,48,36,37,38,-10,16,58,72,71,37,42,43,44,45,-9,46,47,42,80,48,49,26,59,44,23,43,83,69,50,51,52,53,49,54,1,0,56,58,59,-1,-2,-3,-4,47,-5,-6,51,87,-7,-8,-9,88,81,50,60,60,14,62,8,9,63,64,65,66,67,63,68,69,62,4,56,21,15,54,70,71,72,24,73,74,75,76,77,78,79,30,-7,65,31,64,6,-5,-4,20,29,80,81,-1,32,33,83,84,85,86,86,87,27,}));}
//	@Test public void test_1 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(22, driver.singleNumber(new int[]{88,89,61,69,59,70,-9,27,46,10,18,11,21,12,14,73,15,16,-6,31,17,12,18,19,26,41,38,52,71,0,-4,1,-8,3,4,5,7,8,9,20,21,22,23,34,24,14,25,26,17,27,28,60,23,77,19,88,67,7,30,31,33,20,34,-3,36,84,38,36,79,1,75,15,82,54,40,55,74,40,41,42,64,44,45,42,46,47,48,0,49,78,3,5,16,33,47,81,-5,50,52,89,24,54,55,57,57,58,59,-1,-2,-3,-4,-5,28,-6,-8,-9,66,10,58,-1,-2,9,62,60,61,87,62,63,64,65,66,67,68,4,69,44,45,25,30,50,8,72,70,71,72,73,74,76,75,63,76,11,77,65,78,79,80,68,49,48,80,81,82,84,87,}));}
//	@Test public void test_2 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(4, driver.singleNumber(new int[]{89,65,77,78,13,0,52,89,10,72,56,12,-2,13,57,75,10,69,-2,17,-4,-5,66,80,0,25,4,-4,6,57,12,62,20,65,66,23,86,17,69,25,81,71,70,71,72,20,75,31,77,34,78,6,34,23,56,62,-5,43,31,80,81,52,70,86,43,}));}
//	@Test public void test_3 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(79, driver.singleNumber(new int[]{68,9,76,25,30,84,12,-3,10,26,11,12,73,13,14,15,16,17,18,19,27,17,0,1,2,3,4,5,6,46,7,8,9,24,15,20,21,22,23,24,25,26,27,28,67,29,14,63,80,83,52,30,31,32,64,33,34,37,35,36,37,38,39,75,20,42,40,41,16,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,22,33,51,8,61,62,63,64,65,66,67,68,69,50,29,41,49,86,4,0,70,71,72,73,74,75,76,23,77,78,79,70,56,5,-2,19,80,81,82,83,72,57,84,85,86,87,31,88,89,35,81,47,-10,87,88,39,36,21,89,54,82,3,59,40,77,-9,66,34,78,28,69,58,-5,44,45,62,43,10,6,-8,38,18,-1,-2,32,2,-3,-4,-5,-6,-7,-8,-9,71,-4,74,1,-1,-10,11,61,48,-6,-7,85,13,65,7,55,}));}
//	@Test public void test_4 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(66, driver.singleNumber(new int[]{-1,3,49,10,11,12,13,14,33,15,0,16,71,17,18,19,16,31,0,1,2,78,3,4,5,6,7,8,9,87,20,21,51,22,28,23,24,25,26,27,-3,-6,23,28,29,43,30,39,89,65,57,2,27,60,30,31,32,42,33,34,35,36,37,38,39,46,4,47,20,70,62,40,41,42,43,38,45,46,21,47,48,49,55,50,25,51,52,53,45,54,55,24,56,57,19,58,59,-5,68,-2,60,61,62,63,80,64,65,66,76,67,68,69,11,67,70,8,71,72,73,74,74,75,7,14,76,77,84,78,79,17,61,15,-9,80,81,82,37,83,84,85,86,87,88,89,53,9,10,-10,54,13,88,77,69,86,85,29,6,64,34,58,63,18,-10,56,79,-4,36,22,5,41,59,81,73,-1,1,72,-2,-3,-4,-5,-6,75,-7,-8,-9,-8,35,52,40,83,82,32,50,26,-7,48,12,}));}
//	@Test public void test_5 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(72, driver.singleNumber(new int[]{20,48,-9,28,-3,3,33,57,72,53,40,54,-6,11,33,79,57,11,54,61,-3,53,-5,-6,0,-9,28,0,3,-5,61,40,48,79,20,}));}
//	@Test public void test_6 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(69, driver.singleNumber(new int[]{69,36,-1,-10,-1,36,-10,}));}
//	@Test public void test_7 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(7, driver.singleNumber(new int[]{88,84,89,26,40,8,28,6,10,11,44,13,51,15,16,17,18,19,0,1,2,48,3,29,4,5,6,7,8,9,53,72,71,20,21,41,11,24,25,26,27,64,28,29,36,-6,86,31,32,33,34,35,36,38,19,39,38,20,3,16,40,33,41,57,44,1,45,0,47,24,48,76,34,82,-9,50,21,27,50,51,52,53,54,55,54,57,58,59,-6,47,-8,61,-9,78,75,65,52,2,60,45,15,60,61,74,62,63,62,64,9,31,65,67,17,68,69,25,70,69,80,5,59,89,13,67,70,71,72,79,73,4,74,-8,75,76,78,79,18,58,55,32,39,73,68,10,88,80,82,35,84,63,86,}));}
//	@Test public void test_8 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(83, driver.singleNumber(new int[]{68,-9,11,47,-10,10,11,12,13,14,16,17,18,85,30,82,81,0,1,6,7,29,-4,73,71,20,67,21,22,23,26,27,28,29,1,17,48,80,6,30,31,32,33,43,34,38,23,38,20,22,40,13,64,14,43,44,61,47,48,44,49,49,87,28,12,33,18,54,56,58,57,58,59,-3,-4,-5,-8,-9,34,54,26,0,56,61,62,63,64,21,67,68,59,70,62,-8,40,63,70,71,27,-10,73,16,-3,75,-5,57,31,7,84,80,81,32,82,83,84,86,75,85,10,86,87,}));}
//	@Test public void test_9 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(-2, driver.singleNumber(new int[]{49,88,89,38,50,-10,53,37,-8,9,25,42,44,58,52,28,10,-7,11,74,12,13,14,69,16,77,17,19,1,0,1,2,-9,4,5,16,6,54,32,9,20,78,65,73,81,20,21,41,23,24,25,26,27,28,29,23,55,67,46,40,82,85,17,-6,83,30,31,32,6,33,26,59,35,70,37,38,39,30,33,84,79,-10,19,68,40,41,42,44,56,45,80,46,48,49,87,13,24,50,39,51,52,53,54,5,55,56,88,71,57,14,58,48,59,-2,-6,-7,-8,89,-9,11,10,35,60,29,61,61,64,65,2,66,67,68,27,69,60,66,86,45,57,75,4,0,70,71,51,72,73,72,74,75,77,12,78,79,64,21,31,80,81,82,83,84,85,86,87,}));}
//	@Test public void test_10 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(58, driver.singleNumber(new int[]{88,10,48,33,-9,77,57,-10,21,14,61,50,53,10,54,12,57,58,14,-3,34,-7,-8,-9,43,72,2,48,85,-10,2,64,5,23,8,9,61,-7,64,21,23,68,25,88,27,75,68,-8,5,78,36,27,72,12,75,33,77,34,78,50,25,36,38,-3,8,53,9,38,80,54,85,80,43,}));}
//	@Test public void test_11 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(34, driver.singleNumber(new int[]{89,46,67,47,-1,50,49,65,-10,5,-10,-5,50,51,86,52,52,10,12,46,82,58,14,59,-1,71,0,35,78,7,2,-5,14,80,0,1,2,3,31,5,7,30,9,61,49,62,1,63,61,65,25,59,23,67,62,39,25,79,12,70,47,28,74,9,85,3,81,70,71,58,10,30,74,31,34,78,79,35,39,63,89,28,51,23,80,81,82,85,86,}));}
//	@Test public void test_12 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(25, driver.singleNumber(new int[]{44,61,44,35,24,25,24,61,35,53,53,}));}
//	@Test public void test_13 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(12, driver.singleNumber(new int[]{44,46,45,34,89,46,48,10,66,-10,30,48,87,16,79,8,50,54,10,11,55,12,9,59,85,16,73,17,63,50,-5,-6,-7,11,-8,37,-5,62,5,-7,8,9,60,62,63,65,21,66,38,24,25,-6,5,25,55,40,39,24,60,65,78,41,-10,73,17,30,89,83,77,78,34,79,36,42,37,38,39,36,45,77,44,54,21,-8,83,40,41,85,59,42,87,}));}
//	@Test public void test_14 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(38, driver.singleNumber(new int[]{88,13,89,69,76,2,32,20,-10,70,48,59,18,29,8,33,10,11,13,50,16,17,18,22,42,0,2,3,84,8,74,51,20,21,22,-10,23,68,35,25,29,49,87,10,30,31,32,33,35,38,11,61,41,42,0,48,49,17,52,3,50,51,52,57,31,57,25,88,59,-3,23,-8,-9,41,61,64,65,81,68,69,-8,71,30,64,70,-9,71,72,73,74,76,21,65,73,89,16,72,81,-3,84,87,}));}
//	@Test public void test_15 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(-1, driver.singleNumber(new int[]{88,89,75,14,44,27,-10,61,89,5,47,84,-4,52,10,12,58,55,13,14,16,17,18,29,19,-2,23,0,1,2,3,4,87,5,6,8,41,51,20,21,17,22,53,23,24,26,27,28,60,29,83,12,42,86,57,21,59,26,45,80,30,32,18,33,34,49,37,38,39,-8,34,-10,88,33,79,20,39,40,41,2,42,43,77,44,69,45,10,3,47,48,49,8,4,30,22,38,48,37,51,52,53,55,40,57,58,-1,59,-2,-3,-4,24,-6,-7,-8,70,63,-9,82,-9,66,60,-3,16,61,62,63,64,64,43,66,69,13,32,71,28,-6,1,70,71,75,77,79,-7,6,0,85,81,80,81,82,83,84,19,85,86,62,87,}));}
//	@Test public void test_16 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(-9, driver.singleNumber(new int[]{22,24,64,22,24,34,8,43,51,50,50,51,53,34,83,-9,2,85,84,53,8,2,83,84,85,64,43,}));}
//	@Test public void test_17 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(66, driver.singleNumber(new int[]{89,49,-1,32,15,72,70,60,11,-7,80,12,27,14,16,15,16,69,19,78,77,0,1,2,3,4,19,6,7,9,20,22,23,29,25,27,59,39,29,46,33,-3,40,30,14,32,33,34,34,36,39,20,12,55,79,0,40,89,41,23,42,43,44,43,68,46,67,47,48,49,44,76,62,84,42,-9,11,52,53,56,55,56,57,58,58,59,-1,-3,-4,52,-7,36,-8,-9,25,9,53,47,-4,4,41,60,61,62,64,66,67,68,69,2,6,3,64,70,72,73,76,77,78,79,22,30,7,73,-8,80,1,61,48,84,57,}));}
//	@Test public void test_18 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(62, driver.singleNumber(new int[]{2,24,69,26,48,18,69,50,61,50,73,51,32,83,38,75,32,51,14,38,48,18,8,24,-9,14,-9,26,6,2,73,6,8,75,61,83,62,}));}
//	@Test public void test_19 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(41, driver.singleNumber(new int[]{88,89,42,-5,-10,22,-4,45,18,10,11,12,13,14,15,16,17,18,40,19,37,77,0,0,1,3,4,5,66,7,8,9,51,9,39,21,22,36,23,56,88,24,25,52,7,26,74,27,28,29,73,46,8,26,30,86,32,62,21,33,43,38,48,-3,36,37,28,38,32,39,27,85,11,5,63,87,79,40,41,42,44,12,43,16,44,45,-8,46,48,55,25,61,-2,-1,50,51,52,53,54,17,55,56,57,15,58,-1,59,-2,-3,-4,-5,83,-7,-8,-9,3,13,23,24,61,62,63,64,65,66,67,68,84,89,59,82,50,14,72,65,71,10,19,70,71,-7,72,73,74,75,77,78,79,-9,67,30,75,53,57,80,29,68,1,58,78,33,64,70,80,81,-10,82,54,83,4,81,84,85,86,87,}));}
//	@Test public void test_20 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(72, driver.singleNumber(new int[]{0,6,18,10,57,16,77,75,43,84,34,10,11,12,13,14,15,16,52,17,18,19,49,0,1,2,3,4,86,5,6,7,8,9,79,20,55,21,22,23,24,25,22,27,28,29,60,38,1,33,14,30,31,44,32,33,2,34,35,36,37,38,27,39,61,63,78,40,41,64,42,37,43,44,66,45,46,47,48,49,85,-8,21,51,71,68,50,51,52,53,54,55,56,57,58,59,59,24,88,69,30,20,60,61,62,63,64,65,15,66,67,68,69,87,25,11,39,42,54,80,70,71,72,73,83,74,75,76,77,78,79,89,47,12,-5,82,80,81,82,83,84,85,86,87,88,89,70,48,-10,53,17,13,31,56,65,62,-9,46,-1,29,9,-3,-7,58,32,67,76,7,3,36,8,-1,-2,-3,-4,-5,-6,-7,-8,-9,35,41,40,-2,-4,28,74,-6,81,73,19,50,-10,23,4,5,45,}));}
//	@Test public void test_21 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(28, driver.singleNumber(new int[]{44,22,67,25,26,-2,28,79,-6,9,22,32,67,70,26,32,79,38,-2,44,-6,70,38,9,25,}));}
//	@Test public void test_22 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(-10, driver.singleNumber(new int[]{11,88,83,89,63,-5,54,-10,85,20,57,2,74,4,10,1,11,87,12,13,14,15,18,30,46,73,7,0,1,78,2,3,4,5,89,6,7,6,9,18,13,20,21,22,23,5,28,29,3,10,80,40,30,31,32,34,12,36,37,14,38,22,34,48,49,45,61,40,42,43,52,28,45,46,42,48,49,88,76,84,59,75,21,50,52,53,54,55,56,57,58,59,-2,-5,-6,-7,38,32,-2,70,86,15,53,23,-7,61,56,63,64,65,67,29,68,79,65,68,81,77,70,9,72,73,31,74,43,75,76,77,78,79,67,-6,64,0,50,37,36,72,80,81,58,83,84,85,55,86,87,}));}
//	@Test public void test_23 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(86, driver.singleNumber(new int[]{45,36,65,38,45,40,33,72,52,51,42,16,52,55,56,57,13,58,15,19,75,-2,16,85,-4,19,24,-7,-9,1,56,1,78,51,4,-4,6,-7,61,64,65,24,68,68,4,81,-2,-9,6,84,13,80,72,75,76,33,78,64,36,38,57,55,58,80,81,61,40,84,15,85,86,42,76,}));}
//	@Test public void test_24 () {W1_1_Single_Number driver = new W1_1_Single_Number();assertEquals(44, driver.singleNumber(new int[]{88,30,69,14,55,66,-10,41,19,61,29,10,13,31,14,1,15,-8,16,17,18,19,50,42,16,23,1,24,4,6,15,53,23,24,25,26,27,28,29,83,-5,45,30,31,78,33,34,84,35,36,37,38,-7,77,13,88,68,62,-3,59,17,-4,26,38,73,41,42,44,45,6,52,47,48,54,79,85,18,48,50,51,52,53,54,55,82,34,-1,59,-2,-3,-4,-5,10,-7,-8,-9,4,-2,37,60,60,61,62,63,64,65,66,68,69,33,81,35,27,71,73,51,77,78,79,-9,25,64,28,36,63,71,47,81,82,83,84,85,-1,-10,65,}));}

	
	
}
